// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_line_service is a generated GoMock package.
package mock_line_service

import (
	context "context"
	reflect "reflect"

	shared "github.com/dacharat/my-crypto-assets/pkg/shared"
	gomock "github.com/golang/mock/gomock"
)

// MockILineService is a mock of ILineService interface.
type MockILineService struct {
	ctrl     *gomock.Controller
	recorder *MockILineServiceMockRecorder
}

// MockILineServiceMockRecorder is the mock recorder for MockILineService.
type MockILineServiceMockRecorder struct {
	mock *MockILineService
}

// NewMockILineService creates a new mock instance.
func NewMockILineService(ctrl *gomock.Controller) *MockILineService {
	mock := &MockILineService{ctrl: ctrl}
	mock.recorder = &MockILineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILineService) EXPECT() *MockILineServiceMockRecorder {
	return m.recorder
}

// PushMessage mocks base method.
func (m *MockILineService) PushMessage(ctx context.Context, accounts []shared.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", ctx, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockILineServiceMockRecorder) PushMessage(ctx, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockILineService)(nil).PushMessage), ctx, accounts)
}

// ReplyTextMessage mocks base method.
func (m *MockILineService) ReplyTextMessage(ctx context.Context, token, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTextMessage", ctx, token, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyTextMessage indicates an expected call of ReplyTextMessage.
func (mr *MockILineServiceMockRecorder) ReplyTextMessage(ctx, token, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTextMessage", reflect.TypeOf((*MockILineService)(nil).ReplyTextMessage), ctx, token, message)
}

// SendFlexMessage mocks base method.
func (m *MockILineService) SendFlexMessage(ctx context.Context, token string, accounts []shared.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFlexMessage", ctx, token, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFlexMessage indicates an expected call of SendFlexMessage.
func (mr *MockILineServiceMockRecorder) SendFlexMessage(ctx, token, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFlexMessage", reflect.TypeOf((*MockILineService)(nil).SendFlexMessage), ctx, token, accounts)
}
