// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_line_service is a generated GoMock package.
package mock_line_service

import (
	context "context"
	http "net/http"
	reflect "reflect"

	platnetwatchservice "github.com/dacharat/my-crypto-assets/pkg/service/platnetwatchservice"
	shared "github.com/dacharat/my-crypto-assets/pkg/shared"
	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockILineService is a mock of ILineService interface.
type MockILineService struct {
	ctrl     *gomock.Controller
	recorder *MockILineServiceMockRecorder
}

// MockILineServiceMockRecorder is the mock recorder for MockILineService.
type MockILineServiceMockRecorder struct {
	mock *MockILineService
}

// NewMockILineService creates a new mock instance.
func NewMockILineService(ctrl *gomock.Controller) *MockILineService {
	mock := &MockILineService{ctrl: ctrl}
	mock.recorder = &MockILineServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILineService) EXPECT() *MockILineServiceMockRecorder {
	return m.recorder
}

// IsOwner mocks base method.
func (m *MockILineService) IsOwner(userId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", userId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOwner indicates an expected call of IsOwner.
func (mr *MockILineServiceMockRecorder) IsOwner(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockILineService)(nil).IsOwner), userId)
}

// ParseRequest mocks base method.
func (m *MockILineService) ParseRequest(r *http.Request) ([]*linebot.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRequest", r)
	ret0, _ := ret[0].([]*linebot.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRequest indicates an expected call of ParseRequest.
func (mr *MockILineServiceMockRecorder) ParseRequest(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRequest", reflect.TypeOf((*MockILineService)(nil).ParseRequest), r)
}

// PushMessage mocks base method.
func (m *MockILineService) PushMessage(ctx context.Context, accounts []shared.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", ctx, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockILineServiceMockRecorder) PushMessage(ctx, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockILineService)(nil).PushMessage), ctx, accounts)
}

// PushPlanetwatchMessage mocks base method.
func (m *MockILineService) PushPlanetwatchMessage(ctx context.Context, summary platnetwatchservice.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushPlanetwatchMessage", ctx, summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushPlanetwatchMessage indicates an expected call of PushPlanetwatchMessage.
func (mr *MockILineServiceMockRecorder) PushPlanetwatchMessage(ctx, summary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushPlanetwatchMessage", reflect.TypeOf((*MockILineService)(nil).PushPlanetwatchMessage), ctx, summary)
}

// ReplyTextMessage mocks base method.
func (m *MockILineService) ReplyTextMessage(ctx context.Context, token, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplyTextMessage", ctx, token, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyTextMessage indicates an expected call of ReplyTextMessage.
func (mr *MockILineServiceMockRecorder) ReplyTextMessage(ctx, token, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTextMessage", reflect.TypeOf((*MockILineService)(nil).ReplyTextMessage), ctx, token, message)
}

// SendFlexMessage mocks base method.
func (m *MockILineService) SendFlexMessage(ctx context.Context, token string, accounts []shared.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendFlexMessage", ctx, token, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendFlexMessage indicates an expected call of SendFlexMessage.
func (mr *MockILineServiceMockRecorder) SendFlexMessage(ctx, token, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendFlexMessage", reflect.TypeOf((*MockILineService)(nil).SendFlexMessage), ctx, token, accounts)
}

// SendPlanetwatchFlexMessage mocks base method.
func (m *MockILineService) SendPlanetwatchFlexMessage(ctx context.Context, token string, summary platnetwatchservice.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPlanetwatchFlexMessage", ctx, token, summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPlanetwatchFlexMessage indicates an expected call of SendPlanetwatchFlexMessage.
func (mr *MockILineServiceMockRecorder) SendPlanetwatchFlexMessage(ctx, token, summary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPlanetwatchFlexMessage", reflect.TypeOf((*MockILineService)(nil).SendPlanetwatchFlexMessage), ctx, token, summary)
}
