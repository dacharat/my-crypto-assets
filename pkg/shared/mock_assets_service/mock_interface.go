// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package mock_assets_service is a generated GoMock package.
package mock_assets_service

import (
	context "context"
	reflect "reflect"

	shared "github.com/dacharat/my-crypto-assets/pkg/shared"
	gomock "github.com/golang/mock/gomock"
)

// MockIAssetsService is a mock of IAssetsService interface.
type MockIAssetsService struct {
	ctrl     *gomock.Controller
	recorder *MockIAssetsServiceMockRecorder
}

// MockIAssetsServiceMockRecorder is the mock recorder for MockIAssetsService.
type MockIAssetsServiceMockRecorder struct {
	mock *MockIAssetsService
}

// NewMockIAssetsService creates a new mock instance.
func NewMockIAssetsService(ctrl *gomock.Controller) *MockIAssetsService {
	mock := &MockIAssetsService{ctrl: ctrl}
	mock.recorder = &MockIAssetsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAssetsService) EXPECT() *MockIAssetsServiceMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockIAssetsService) GetAccount(ctx context.Context) (shared.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx)
	ret0, _ := ret[0].(shared.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockIAssetsServiceMockRecorder) GetAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAssetsService)(nil).GetAccount), ctx)
}

// Type mocks base method.
func (m *MockIAssetsService) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockIAssetsServiceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockIAssetsService)(nil).Type))
}
