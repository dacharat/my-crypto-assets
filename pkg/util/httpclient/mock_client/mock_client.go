// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	httpclient "github.com/dacharat/my-crypto-assets/pkg/util/httpclient"
	gomock "github.com/golang/mock/gomock"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIClient) Get(ctx context.Context, url string, header http.Header, opts ...httpclient.Option) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, header}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIClientMockRecorder) Get(ctx, url, header interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, header}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIClient)(nil).Get), varargs...)
}

// Post mocks base method.
func (m *MockIClient) Post(ctx context.Context, url string, header http.Header, body io.Reader, opts ...httpclient.Option) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, header, body}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Post", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockIClientMockRecorder) Post(ctx, url, header, body interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, header, body}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockIClient)(nil).Post), varargs...)
}

// Put mocks base method.
func (m *MockIClient) Put(ctx context.Context, url string, header http.Header, body io.Reader, opts ...httpclient.Option) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, url, header, body}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Put", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockIClientMockRecorder) Put(ctx, url, header, body interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, url, header, body}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIClient)(nil).Put), varargs...)
}
