// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_coingecko is a generated GoMock package.
package mock_coingecko

import (
	context "context"
	reflect "reflect"

	coingecko "github.com/dacharat/my-crypto-assets/pkg/external/coingecko"
	gomock "github.com/golang/mock/gomock"
)

// MockICoingecko is a mock of ICoingecko interface.
type MockICoingecko struct {
	ctrl     *gomock.Controller
	recorder *MockICoingeckoMockRecorder
}

// MockICoingeckoMockRecorder is the mock recorder for MockICoingecko.
type MockICoingeckoMockRecorder struct {
	mock *MockICoingecko
}

// NewMockICoingecko creates a new mock instance.
func NewMockICoingecko(ctrl *gomock.Controller) *MockICoingecko {
	mock := &MockICoingecko{ctrl: ctrl}
	mock.recorder = &MockICoingeckoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICoingecko) EXPECT() *MockICoingeckoMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockICoingecko) GetPrice(ctx context.Context, c coingecko.Chain) (coingecko.GetPriceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", ctx, c)
	ret0, _ := ret[0].(coingecko.GetPriceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockICoingeckoMockRecorder) GetPrice(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockICoingecko)(nil).GetPrice), ctx, c)
}
