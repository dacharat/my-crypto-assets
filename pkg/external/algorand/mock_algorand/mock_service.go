// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mock_algorand is a generated GoMock package.
package mock_algorand

import (
	context "context"
	reflect "reflect"

	algorand "github.com/dacharat/my-crypto-assets/pkg/external/algorand"
	gomock "github.com/golang/mock/gomock"
)

// MockIAlgoland is a mock of IAlgoland interface.
type MockIAlgoland struct {
	ctrl     *gomock.Controller
	recorder *MockIAlgolandMockRecorder
}

// MockIAlgolandMockRecorder is the mock recorder for MockIAlgoland.
type MockIAlgolandMockRecorder struct {
	mock *MockIAlgoland
}

// NewMockIAlgoland creates a new mock instance.
func NewMockIAlgoland(ctrl *gomock.Controller) *MockIAlgoland {
	mock := &MockIAlgoland{ctrl: ctrl}
	mock.recorder = &MockIAlgolandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAlgoland) EXPECT() *MockIAlgolandMockRecorder {
	return m.recorder
}

// GetAlgodAccountByID mocks base method.
func (m *MockIAlgoland) GetAlgodAccountByID(ctx context.Context, account string) (algorand.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlgodAccountByID", ctx, account)
	ret0, _ := ret[0].(algorand.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlgodAccountByID indicates an expected call of GetAlgodAccountByID.
func (mr *MockIAlgolandMockRecorder) GetAlgodAccountByID(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlgodAccountByID", reflect.TypeOf((*MockIAlgoland)(nil).GetAlgodAccountByID), ctx, account)
}

// GetAssetByID mocks base method.
func (m *MockIAlgoland) GetAssetByID(ctx context.Context, asset int) (algorand.AssetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssetByID", ctx, asset)
	ret0, _ := ret[0].(algorand.AssetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssetByID indicates an expected call of GetAssetByID.
func (mr *MockIAlgolandMockRecorder) GetAssetByID(ctx, asset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssetByID", reflect.TypeOf((*MockIAlgoland)(nil).GetAssetByID), ctx, asset)
}

// GetTransaction mocks base method.
func (m *MockIAlgoland) GetTransaction(ctx context.Context, account string) (algorand.AccountTransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", ctx, account)
	ret0, _ := ret[0].(algorand.AccountTransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockIAlgolandMockRecorder) GetTransaction(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockIAlgoland)(nil).GetTransaction), ctx, account)
}
